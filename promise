<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=<sc>, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        //let mypromise = new Promise((resolve, reject) => {
            //let success = true;
           // if (success) {
              //resolve("The operation is successful");
            //} else {
              //reject("The operation failed");
            //}
         // });
          
          //mypromise
            //.then((result) => {
             // console.log(result);
            //})
            //.catch((error) => {
              //console.log(error);
           // });
           //let promise = new Promise((resolve,reject)=>{
            //resolve(5);
        //})
        //promise
        //.then(result=>{
            //console.log(result);
            //return result*2
            // })
        //.then(result=>{
            //console.log(result);
           // return result+3
       // })
        //.then(result=>{
            //console.log(result);
        //})
        //.catch(error=>{
            //console.lpg("error",error)
        //})
        let myPromise = new Promise((resolve, reject) => {
            setTimeout(() => {
                let success = true;          
                if (success) {
                    resolve("Operation successful after delay!");
                } else {
                    reject("Operation failed after delay.");
                }
            }, 2000); 
        });
        
        myPromise
            .then((result) => {
                console.log(result); 
            })
            .catch((error) => {
                console.log(error);  
            });
          
            
    </script>
</body>
</html>
Promise:
A promise a special javascript object that represent the eventual completion(or failure asynchronous operation.
It allows to handle asynchronous tasks more than callbacks
Three states:
1)pending:the initial state ,the promise is still waiting for the operation to finish
2)fulfilled:the operation completed successfully 
3)rejected:the operation failed;
Exp:
1)to create a promise -new promise()
Two parameters:
Resolve-to mark the promise as succesful
Reject-mark it as failed
2)handling the result:
.then() method is called when promise is fullfilled.it will resolve the result from resolve()
.catch() method is called if the promise is rejected .it receives the error message from reject()
